name: Build, Push to Docker Hub, Deploy to Hugging Face, Railway, and GitHub Pages

on:
  push:
    branches:
      - main

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend_changed: ${{ steps.set-vars.outputs.backend_changed }}
      ml_changed: ${{ steps.set-vars.outputs.ml_changed }}
      frontend_changed: ${{ steps.set-vars.outputs.frontend_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed files
        id: set-vars
        run: |
          BACKEND_CHANGED=false
          ML_CHANGED=false
          FRONTEND_CHANGED=false

          if git diff --name-only HEAD~1 HEAD | grep '^backend/'; then
            BACKEND_CHANGED=true
          fi

          if git diff --name-only HEAD~1 HEAD | grep '^ml/'; then
            ML_CHANGED=true
          fi

          if git diff --name-only HEAD~1 HEAD | grep '^frontend/'; then
            FRONTEND_CHANGED=true
          fi

          echo "backend_changed=$BACKEND_CHANGED" >> $GITHUB_OUTPUT
          echo "ml_changed=$ML_CHANGED" >> $GITHUB_OUTPUT
          echo "frontend_changed=$FRONTEND_CHANGED" >> $GITHUB_OUTPUT

  build-backend:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.backend_changed == 'true'
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Backend Docker Image
        id: build
        run: |
          IMAGE_NAME=harithkavish/skinnet-analyzer
          TAG=backend-latest

          docker build -t $IMAGE_NAME:$TAG ./backend
          docker push $IMAGE_NAME:$TAG

          echo "image_tag=$TAG" >> $GITHUB_OUTPUT

  build-ml:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.ml_changed == 'true'
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push ML Docker Image
        id: build
        run: |
          IMAGE_NAME=harithkavish/skinnet-analyzer
          TAG=ml-latest

          docker build -t $IMAGE_NAME:$TAG ./ml
          docker push $IMAGE_NAME:$TAG

          echo "image_tag=$TAG" >> $GITHUB_OUTPUT

  deploy-railway:
    needs: build-backend
    runs-on: ubuntu-latest
    if: needs.build-backend.result == 'success'
    steps:
      - name: Trigger Railway Deployment via API
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
          ML_API_URL: ${{ secrets.ML_API_URL }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "Triggering deployment to Railway via API with environment variables..."
        
          curl -X POST "https://backboard.railway.app/v2/projects/${RAILWAY_PROJECT_ID}/deployments" \
          -H "Authorization: Bearer ${RAILWAY_TOKEN}" \
          -H "Content-Type: application/json" \
          -d '{
            "deploymentType": "IMAGE",
            "image": "harithkavish/skinnet-analyzer:backend-latest",
            "serviceName": "backend",
            "envs": [
              {
                "key": "ML_API_URL",
                "value": "'"${ML_API_URL}"'"
              },
              {
                "key": "GEMINI_API_KEY",
                "value": "'"${GEMINI_API_KEY}"'"
              }
            ],
            "meta": {
              "forceDeploy": true
            }
          }'

  deploy-huggingface:
    needs: build-ml
    runs-on: ubuntu-latest
    if: needs.build-ml.result == 'success'
    steps:
      - name: Rebuild Hugging Face Space
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_SPACE_ID: ${{ secrets.HF_SPACE_ID }}
        run: |
          echo "Rebuilding Hugging Face Space: https://api.huggingface.co/spaces/$HF_SPACE_ID/rebuild"
          ATTEMPTS=0
          MAX_ATTEMPTS=5
          until curl -v -X POST "https://api.huggingface.co/spaces/$HF_SPACE_ID/rebuild" \
            -H "Authorization: Bearer $HF_TOKEN"; do
              ATTEMPTS=$((ATTEMPTS+1))
              if [ $ATTEMPTS -ge $MAX_ATTEMPTS ]; then
                echo "❌ Failed to rebuild Hugging Face Space after $MAX_ATTEMPTS attempts."
                exit 1
              fi
              echo "🔄 Retrying in 5 seconds... (Attempt $ATTEMPTS)"
              sleep 5
          done

  build-frontend:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.frontend_changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Inject Environment Variables
        run: |
          echo "REACT_APP_BACKEND_API_URL=${{ secrets.FRONTEND_BACKEND_API_URL }}" > frontend/.env
      
      - name: Install dependencies
        run: npm install --prefix frontend
        
      - name: Build project
        run: npm run build --prefix frontend

  deploy-frontend:
    needs: build-frontend
    runs-on: ubuntu-latest
    if: needs.build-frontend.result == 'success'
    steps:
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
