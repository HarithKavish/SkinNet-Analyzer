name: Build, Push to Docker Hub, Deploy to Hugging Face, Railway, and GitHub Pages

on:
  push:
    branches:
      - main

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend_changed: ${{ steps.set-vars.outputs.backend_changed }}
      ml_changed: ${{ steps.set-vars.outputs.ml_changed }}
      frontend_changed: ${{ steps.set-vars.outputs.frontend_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed files
        id: set-vars
        run: |
          BACKEND_CHANGED=false
          ML_CHANGED=false
          FRONTEND_CHANGED=false

          if git diff --name-only HEAD~1 HEAD | grep '^backend/'; then
            BACKEND_CHANGED=true
          fi

          if git diff --name-only HEAD~1 HEAD | grep '^ml/'; then
            ML_CHANGED=true
          fi

          if git diff --name-only HEAD~1 HEAD | grep '^frontend/'; then
            FRONTEND_CHANGED=true
          fi

          echo "backend_changed=$BACKEND_CHANGED" >> $GITHUB_OUTPUT
          echo "ml_changed=$ML_CHANGED" >> $GITHUB_OUTPUT
          echo "frontend_changed=$FRONTEND_CHANGED" >> $GITHUB_OUTPUT

  build-backend:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.backend_changed == 'true'
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Backend Docker Image
        id: build
        run: |
          IMAGE_NAME=harithkavish/skinnet-analyzer
          TAG=backend-latest

          docker build -t $IMAGE_NAME:$TAG ./backend
          docker push $IMAGE_NAME:$TAG

          echo "image_tag=$TAG" >> $GITHUB_OUTPUT

  build-ml:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.ml_changed == 'true'
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push ML Docker Image
        id: build
        run: |
          IMAGE_NAME=harithkavish/skinnet-analyzer
          TAG=ml-latest

          docker build -t $IMAGE_NAME:$TAG ./ml
          docker push $IMAGE_NAME:$TAG

          echo "image_tag=$TAG" >> $GITHUB_OUTPUT

  deploy-render:
    needs: build-backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          echo "IMAGE_REPO=harithkavish/skinnet-analyzer" >> $GITHUB_ENV
          echo "IMAGE_TAG=backend-latest" >> $GITHUB_ENV

      - name: Update Render Environment Variables
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          ML_API_URL: ${{ secrets.ML_API_URL }}
        run: |
          echo "Updating Render Environment Variables..."
          curl -X PATCH "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/env-vars" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d "{
              \"envVars\": [
                { \"key\": \"GEMINI_API_KEY\", \"value\": \"${GEMINI_API_KEY}\" },
                { \"key\": \"ML_API_URL\", \"value\": \"${ML_API_URL}\" }
              ]
            }"

      - name: Trigger Render Deploy Hook
        env:
          RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
        run: |
          echo "Triggering Render Deploy Hook..."
          curl -X POST "$RENDER_DEPLOY_HOOK_URL"

  deploy-huggingface:
    needs: build-ml
    runs-on: ubuntu-latest
    if: needs.build-ml.result == 'success'
    steps:
      - name: Trigger Hugging Face Space rebuild
        run: |
          curl -X POST https://huggingface.co/api/spaces/harithkavish/SkinNet-Analyzer/restart \
            -H "Authorization: Bearer ${{ secrets.HF_TOKEN }}"

      - name: Clone Hugging Face Space repository
        run: |
          git clone https://huggingface.co/spaces/harithkavish/SkinNet-Analyzer space-repo
          cd space-repo
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"

          echo "Rebuild triggered at $(date)" >> README.md
          
          git add README.md
          git commit -m "Trigger Hugging Face rebuild after Docker image update" || echo "Nothing to commit"
          git push https://user:${{ secrets.HF_TOKEN }}@huggingface.co/spaces/harithkavish/SkinNet-Analyzer HEAD:main

  build-frontend:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.frontend_changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Inject Environment Variables
        run: |
          echo "REACT_APP_BACKEND_API_URL=${{ secrets.FRONTEND_BACKEND_API_URL }}" > frontend/.env

      - name: Install dependencies
        run: npm install --prefix frontend
      
      - name: Build project
        run: npm run build --prefix frontend

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build

  deploy-frontend:
    needs: build-frontend
    runs-on: ubuntu-latest
    if: needs.build-frontend.result == 'success'
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: frontend/build
          publish_branch: gh-pages
          force_orphan: true
          enable_jekyll: false